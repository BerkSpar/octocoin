// Mocks generated by Mockito 5.4.4 from annotations
// in octocoin/test/features/search/domain/usecases/market_search_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:octocoin/features/search/domain/entities/market.dart' as _i5;
import 'package:octocoin/features/search/domain/repositories/search_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SearchRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchRepository extends _i1.Mock implements _i3.SearchRepository {
  MockSearchRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Exception, List<_i5.Market>>> getMarkets({
    required String? vsCurrency,
    int? page = 1,
    int? itensPerPage = 20,
    bool? sparkline = false,
    List<String>? priceChangePercentages,
    String? order,
    List<String>? marketIds,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMarkets,
          [],
          {
            #vsCurrency: vsCurrency,
            #page: page,
            #itensPerPage: itensPerPage,
            #sparkline: sparkline,
            #priceChangePercentages: priceChangePercentages,
            #order: order,
            #marketIds: marketIds,
          },
        ),
        returnValue: _i4.Future<_i2.Either<Exception, List<_i5.Market>>>.value(
            _FakeEither_0<Exception, List<_i5.Market>>(
          this,
          Invocation.method(
            #getMarkets,
            [],
            {
              #vsCurrency: vsCurrency,
              #page: page,
              #itensPerPage: itensPerPage,
              #sparkline: sparkline,
              #priceChangePercentages: priceChangePercentages,
              #order: order,
              #marketIds: marketIds,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, List<_i5.Market>>>);
}
